{"name":"Queued","tagline":"Simple HTTP-based queue server","body":"# queued\r\n\r\nSimple HTTP-based queue server\r\n\r\n## Getting Started\r\n\r\n**Install:**\r\n\r\nEnsure [Go](http://golang.org/) and [LevelDB](https://code.google.com/p/leveldb/) are installed and then run:\r\n\r\n    $ make\r\n    $ sudo make install\r\n\r\n**Run:**\r\n\r\n    $ queued [options]\r\n\r\n## API\r\n\r\n**Enqueue:**\r\n\r\n    $ curl -X POST http://localhost:5353/:queue -d 'foo'\r\n\r\nAppend the POSTed data to the end of the specified queue (note that queues are created on-the-fly).  The `Location` header will point to the enqueued item and is of the form `http://localhost:5353/:queue/:id`.\r\n\r\n**Dequeue:**\r\n\r\n    $ curl -X POST http://localhost:5353/:queue/dequeue\r\n\r\nDequeue the item currently on the head of the queue.  Guaranteed not to return the same item twice unless a completion timeout is specified (see below).  The `Location` header will point to the dequeued item and is of the form `http://localhost:5353/:queue/:id`.  Queued message data is returned in the response body.\r\n\r\nDequeue optionally takes `wait` and/or `timeout` query string parameters:\r\n\r\n* `wait=<sec>` - block for the specified number of seconds or until there is an item to be read\r\noff the head of the queue\r\n\r\n* `timeout=<sec>` - if the item is not completed (see endpoint below) within the specified number of seconds, the item will automatically be re-enqueued (when no timeout is specified the item is automatically completed when dequeued)\r\n\r\n**Get:**\r\n\r\n    $ curl -X GET http://localhost:5353/:queue/:id\r\n\r\nGet a specific item.  The header `X-Dequeued` will be `true` if the item is currently dequeued and waiting for completion.\r\n\r\n**Complete:**\r\n\r\n    $ curl -X DELETE http://localhost:5353/:queue/:id\r\n\r\nComplete the specified item and destroy it (note that only items dequeued with a timeout can be completed).\r\n\r\n**Stats:**\r\n\r\n    $ curl -X GET http://localhost:5353/:queue\r\n\r\nGet stats about a given queue.\r\n\r\n## CLI Options\r\n\r\n* **-auth=\"\"** - HTTP basic auth password required for all requests\r\n* **-db-path=\"./queued.db\"** - the directory in which queue items will be persisted (n/a for memory store)\r\n* **-port=5353** - port on which to listen\r\n* **-store=leveldb** - the backend in which items will be stored (`leveldb` or `memory`)\r\n* **-sync=true** - boolean indicating whether data should be synced to disk after every write (n/a for memory store, see LevelDB's `WriteOptions::sync`)\r\n* **-v** - output the version number\r\n\r\n## Client Libraries\r\n\r\n* [Node.js](http://github.com/scttnlsn/node-queued)\r\n* [Ruby](http://github.com/scttnlsn/queued-ruby)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}